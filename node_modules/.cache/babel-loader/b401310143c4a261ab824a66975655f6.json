{"ast":null,"code":"const childProcess = require('child_process');\n\nconst SayPlatformBase = require('./base.js');\n\nconst BASE_SPEED = 0; // Unsupported\n\nconst COMMAND = 'powershell';\n\nclass SayPlatformWin32 extends SayPlatformBase {\n  constructor() {\n    super();\n    this.baseSpeed = BASE_SPEED;\n  }\n\n  buildSpeakCommand({\n    text,\n    voice,\n    speed\n  }) {\n    let args = [];\n    let pipedData = '';\n    let options = {};\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`;\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`;\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1);\n      psCommand += `$speak.Rate = ${adjustedSpeed};`;\n    }\n\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd())`;\n    pipedData += text;\n    args.push(psCommand);\n    options.shell = true;\n    return {\n      command: COMMAND,\n      args,\n      pipedData,\n      options\n    };\n  }\n\n  buildExportCommand({\n    text,\n    voice,\n    speed,\n    filename\n  }) {\n    let args = [];\n    let pipedData = '';\n    let options = {};\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`;\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`;\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1);\n      psCommand += `$speak.Rate = ${adjustedSpeed};`;\n    }\n\n    if (!filename) throw new Error('Filename must be provided in export();');else {\n      psCommand += `$speak.SetOutputToWaveFile('${filename}');`;\n    }\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd());$speak.Dispose()`;\n    pipedData += text;\n    args.push(psCommand);\n    options.shell = true;\n    return {\n      command: COMMAND,\n      args,\n      pipedData,\n      options\n    };\n  }\n\n  runStopCommand() {\n    this.child.stdin.pause();\n    childProcess.exec(`taskkill /pid ${this.child.pid} /T /F`);\n  }\n\n  convertSpeed(speed) {\n    // Overriden to map playback speed (as a ratio) to Window's values (-10 to 10, zero meaning x1.0)\n    return Math.max(-10, Math.min(Math.round(9.0686 * Math.log(speed) - 0.1806), 10));\n  }\n\n  getVoices() {\n    let args = [];\n    let psCommand = 'Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;$speak.GetInstalledVoices() | % {$_.VoiceInfo.Name}';\n    args.push(psCommand);\n    return {\n      command: COMMAND,\n      args\n    };\n  }\n\n}\n\nmodule.exports = SayPlatformWin32;","map":{"version":3,"sources":["C:/Users/Lennart/Desktop/dono-system/node_modules/say/platform/win32.js"],"names":["childProcess","require","SayPlatformBase","BASE_SPEED","COMMAND","SayPlatformWin32","constructor","baseSpeed","buildSpeakCommand","text","voice","speed","args","pipedData","options","psCommand","adjustedSpeed","convertSpeed","push","shell","command","buildExportCommand","filename","Error","runStopCommand","child","stdin","pause","exec","pid","Math","max","min","round","log","getVoices","module","exports"],"mappings":"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","sourcesContent":["const childProcess = require('child_process')\n\nconst SayPlatformBase = require('./base.js')\n\nconst BASE_SPEED = 0 // Unsupported\nconst COMMAND = 'powershell'\n\nclass SayPlatformWin32 extends SayPlatformBase {\n  constructor () {\n    super()\n    this.baseSpeed = BASE_SPEED\n  }\n\n  buildSpeakCommand ({ text, voice, speed }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1)\n      psCommand += `$speak.Rate = ${adjustedSpeed};`\n    }\n\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd())`\n\n    pipedData += text\n    args.push(psCommand)\n    options.shell = true\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  buildExportCommand ({ text, voice, speed, filename }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1)\n      psCommand += `$speak.Rate = ${adjustedSpeed};`\n    }\n\n    if (!filename) throw new Error('Filename must be provided in export();')\n    else {\n      psCommand += `$speak.SetOutputToWaveFile('${filename}');`\n    }\n\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd());$speak.Dispose()`\n\n    pipedData += text\n    args.push(psCommand)\n    options.shell = true\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  runStopCommand () {\n    this.child.stdin.pause()\n    childProcess.exec(`taskkill /pid ${this.child.pid} /T /F`)\n  }\n\n  convertSpeed (speed) {\n    // Overriden to map playback speed (as a ratio) to Window's values (-10 to 10, zero meaning x1.0)\n    return Math.max(-10, Math.min(Math.round((9.0686 * Math.log(speed)) - 0.1806), 10))\n  }\n\n  getVoices () {\n    let args = []\n    let psCommand = 'Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;$speak.GetInstalledVoices() | % {$_.VoiceInfo.Name}'\n    args.push(psCommand)\n    return { command: COMMAND, args }\n  }\n}\n\nmodule.exports = SayPlatformWin32\n"]},"metadata":{},"sourceType":"script"}
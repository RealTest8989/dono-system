{"ast":null,"code":"const childProcess = require('child_process');\n\nconst once = require('one-time');\n\nclass SayPlatformBase {\n  constructor() {\n    this.child = null;\n    this.baseSpeed = 0;\n  }\n  /**\n   * Uses system libraries to speak text via the speakers.\n   *\n   * @param {string} text Text to be spoken\n   * @param {string|null} voice Name of voice to be spoken with\n   * @param {number|null} speed Speed of text (e.g. 1.0 for normal, 0.5 half, 2.0 double)\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n\n\n  speak(text, voice, speed, callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {};\n    }\n\n    callback = once(callback);\n\n    if (!text) {\n      return setImmediate(() => {\n        callback(new TypeError('say.speak(): must provide text parameter'));\n      });\n    }\n\n    let {\n      command,\n      args,\n      pipedData,\n      options\n    } = this.buildSpeakCommand({\n      text,\n      voice,\n      speed\n    });\n    this.child = childProcess.spawn(command, args, options);\n    this.child.stdin.setEncoding('ascii');\n    this.child.stderr.setEncoding('ascii');\n\n    if (pipedData) {\n      this.child.stdin.end(pipedData);\n    }\n\n    this.child.stderr.once('data', data => {\n      // we can't stop execution from this function\n      callback(new Error(data));\n    });\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.speak(): could not talk, had an error [code: ${code}] [signal: ${signal}]`));\n      }\n\n      this.child = null;\n      callback(null);\n    });\n  }\n  /**\n   * Uses system libraries to speak text via the speakers.\n   *\n   * @param {string} text Text to be spoken\n   * @param {string|null} voice Name of voice to be spoken with\n   * @param {number|null} speed Speed of text (e.g. 1.0 for normal, 0.5 half, 2.0 double)\n   * @param {string} filename Path to file to write audio to, e.g. \"greeting.wav\"\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n\n\n  export(text, voice, speed, filename, callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {};\n    }\n\n    callback = once(callback);\n\n    if (!text) {\n      return setImmediate(() => {\n        callback(new TypeError('say.export(): must provide text parameter'));\n      });\n    }\n\n    if (!filename) {\n      return setImmediate(() => {\n        callback(new TypeError('say.export(): must provide filename parameter'));\n      });\n    }\n\n    try {\n      var {\n        command,\n        args,\n        pipedData,\n        options\n      } = this.buildExportCommand({\n        text,\n        voice,\n        speed,\n        filename\n      });\n    } catch (error) {\n      return setImmediate(() => {\n        callback(error);\n      });\n    }\n\n    this.child = childProcess.spawn(command, args, options);\n    this.child.stdin.setEncoding('ascii');\n    this.child.stderr.setEncoding('ascii');\n\n    if (pipedData) {\n      this.child.stdin.end(pipedData);\n    }\n\n    this.child.stderr.once('data', data => {\n      // we can't stop execution from this function\n      callback(new Error(data));\n    });\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.export(): could not talk, had an error [code: ${code}] [signal: ${signal}]`));\n      }\n\n      this.child = null;\n      callback(null);\n    });\n  }\n  /**\n   * Stops currently playing audio. There will be unexpected results if multiple audios are being played at once\n   *\n   * TODO: If two messages are being spoken simultaneously, childD points to new instance, no way to kill previous\n   *\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n\n\n  stop(callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {};\n    }\n\n    callback = once(callback);\n\n    if (!this.child) {\n      return setImmediate(() => {\n        callback(new Error('say.stop(): no speech to kill'));\n      });\n    }\n\n    this.runStopCommand();\n    this.child = null;\n    callback(null);\n  }\n\n  convertSpeed(speed) {\n    return Math.ceil(this.baseSpeed * speed);\n  }\n  /**\n   * Get Installed voices on system\n   * @param {Function} callback A callback of type function(err,voices) to return.\n   */\n\n\n  getInstalledVoices(callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {};\n    }\n\n    callback = once(callback);\n    let {\n      command,\n      args\n    } = this.getVoices();\n    var voices = [];\n    this.child = childProcess.spawn(command, args);\n    this.child.stdin.setEncoding('ascii');\n    this.child.stderr.setEncoding('ascii');\n    this.child.stderr.once('data', data => {\n      // we can't stop execution from this function\n      callback(new Error(data));\n    });\n    this.child.stdout.on('data', function (data) {\n      voices += data;\n    });\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.getInstalledVoices(): could not get installed voices, had an error [code: ${code}] [signal: ${signal}]`));\n      }\n\n      if (voices.length > 0) {\n        voices = voices.split('\\r\\n');\n        voices = voices[voices.length - 1] === '' ? voices.slice(0, voices.length - 1) : voices;\n      }\n\n      this.child = null;\n      callback(null, voices);\n    });\n    this.child.stdin.end();\n  }\n\n}\n\nmodule.exports = SayPlatformBase;","map":{"version":3,"sources":["C:/Users/Lennart/Desktop/dono-system/node_modules/say/platform/base.js"],"names":["childProcess","require","once","SayPlatformBase","constructor","child","baseSpeed","speak","text","voice","speed","callback","setImmediate","TypeError","command","args","pipedData","options","buildSpeakCommand","spawn","stdin","setEncoding","stderr","end","data","Error","addListener","code","signal","export","filename","buildExportCommand","error","stop","runStopCommand","convertSpeed","Math","ceil","getInstalledVoices","getVoices","voices","stdout","on","length","split","slice","module","exports"],"mappings":"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","sourcesContent":["const childProcess = require('child_process')\nconst once = require('one-time')\n\nclass SayPlatformBase {\n  constructor () {\n    this.child = null\n    this.baseSpeed = 0\n  }\n\n  /**\n   * Uses system libraries to speak text via the speakers.\n   *\n   * @param {string} text Text to be spoken\n   * @param {string|null} voice Name of voice to be spoken with\n   * @param {number|null} speed Speed of text (e.g. 1.0 for normal, 0.5 half, 2.0 double)\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n  speak (text, voice, speed, callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n\n    callback = once(callback)\n\n    if (!text) {\n      return setImmediate(() => {\n        callback(new TypeError('say.speak(): must provide text parameter'))\n      })\n    }\n\n    let { command, args, pipedData, options } = this.buildSpeakCommand({ text, voice, speed })\n\n    this.child = childProcess.spawn(command, args, options)\n\n    this.child.stdin.setEncoding('ascii')\n    this.child.stderr.setEncoding('ascii')\n\n    if (pipedData) {\n      this.child.stdin.end(pipedData)\n    }\n\n    this.child.stderr.once('data', (data) => {\n      // we can't stop execution from this function\n      callback(new Error(data))\n    })\n\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.speak(): could not talk, had an error [code: ${code}] [signal: ${signal}]`))\n      }\n\n      this.child = null\n\n      callback(null)\n    })\n  }\n\n  /**\n   * Uses system libraries to speak text via the speakers.\n   *\n   * @param {string} text Text to be spoken\n   * @param {string|null} voice Name of voice to be spoken with\n   * @param {number|null} speed Speed of text (e.g. 1.0 for normal, 0.5 half, 2.0 double)\n   * @param {string} filename Path to file to write audio to, e.g. \"greeting.wav\"\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n  export (text, voice, speed, filename, callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n\n    callback = once(callback)\n\n    if (!text) {\n      return setImmediate(() => {\n        callback(new TypeError('say.export(): must provide text parameter'))\n      })\n    }\n\n    if (!filename) {\n      return setImmediate(() => {\n        callback(new TypeError('say.export(): must provide filename parameter'))\n      })\n    }\n\n    try {\n      var { command, args, pipedData, options } = this.buildExportCommand({ text, voice, speed, filename })\n    } catch (error) {\n      return setImmediate(() => {\n        callback(error)\n      })\n    }\n\n    this.child = childProcess.spawn(command, args, options)\n\n    this.child.stdin.setEncoding('ascii')\n    this.child.stderr.setEncoding('ascii')\n\n    if (pipedData) {\n      this.child.stdin.end(pipedData)\n    }\n\n    this.child.stderr.once('data', (data) => {\n      // we can't stop execution from this function\n      callback(new Error(data))\n    })\n\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.export(): could not talk, had an error [code: ${code}] [signal: ${signal}]`))\n      }\n\n      this.child = null\n\n      callback(null)\n    })\n  }\n\n  /**\n   * Stops currently playing audio. There will be unexpected results if multiple audios are being played at once\n   *\n   * TODO: If two messages are being spoken simultaneously, childD points to new instance, no way to kill previous\n   *\n   * @param {Function|null} callback A callback of type function(err) to return.\n   */\n  stop (callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n\n    callback = once(callback)\n\n    if (!this.child) {\n      return setImmediate(() => {\n        callback(new Error('say.stop(): no speech to kill'))\n      })\n    }\n\n    this.runStopCommand()\n\n    this.child = null\n\n    callback(null)\n  }\n\n  convertSpeed (speed) {\n    return Math.ceil(this.baseSpeed * speed)\n  }\n\n  /**\n   * Get Installed voices on system\n   * @param {Function} callback A callback of type function(err,voices) to return.\n   */\n  getInstalledVoices (callback) {\n    if (typeof callback !== 'function') {\n      callback = () => {}\n    }\n    callback = once(callback)\n\n    let { command, args } = this.getVoices()\n    var voices = []\n    this.child = childProcess.spawn(command, args)\n\n    this.child.stdin.setEncoding('ascii')\n    this.child.stderr.setEncoding('ascii')\n\n    this.child.stderr.once('data', (data) => {\n      // we can't stop execution from this function\n      callback(new Error(data))\n    })\n    this.child.stdout.on('data', function (data) {\n      voices += data\n    })\n\n    this.child.addListener('exit', (code, signal) => {\n      if (code === null || signal !== null) {\n        return callback(new Error(`say.getInstalledVoices(): could not get installed voices, had an error [code: ${code}] [signal: ${signal}]`))\n      }\n      if (voices.length > 0) {\n        voices = voices.split('\\r\\n')\n        voices = (voices[voices.length - 1] === '') ? voices.slice(0, voices.length - 1) : voices\n      }\n      this.child = null\n\n      callback(null, voices)\n    })\n\n    this.child.stdin.end()\n  }\n}\n\nmodule.exports = SayPlatformBase\n"]},"metadata":{},"sourceType":"script"}
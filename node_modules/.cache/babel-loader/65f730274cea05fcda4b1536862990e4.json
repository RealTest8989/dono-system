{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lennart\\\\Desktop\\\\dono-system\\\\src\\\\components\\\\alertbox.component.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport '../alertbox.css';\nimport Speech from 'speak-tts';\nimport ReactPlayer from 'react-player';\nimport Donation_Alert from '../donation-alert.mp3';\nexport default class Alertbox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      tts_finished: false,\n      playing: false\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      if (!this.state.playing) {\n        axios.get('http://localhost:5000/donations/queue').then(response => {\n          this.setState({\n            donations: response.data,\n            loaded: true,\n            tts_finished: false\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    }, 10000);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.donations != this.state.donations) {\n      const donation = {\n        id: this.state.donations[0]._id,\n        username: this.state.donations[0].username,\n        message: this.state.donations[0].message,\n        amount: this.state.donations[0].amount,\n        media_url: this.state.donations[0].media_url,\n        start_time: this.state.donations[0].start_time,\n        played: true\n      };\n      this.setState({\n        playing: true\n      });\n      axios.post('http://localhost:5000/donations/update/' + donation.id, donation).then(res => console.log(res.data));\n      const donation_alert_file = document.getElementsByClassName(\"donation-alert\")[0];\n      donation_alert_file.play();\n      const speech = new Speech();\n      speech.setLanguage('en-GB');\n      speech.setPitch(1);\n      speech.setRate(0.8);\n      setTimeout(() => speech.speak({\n        text: `${donation.username} donated $${donation.amount} ${donation.message}`,\n        listeners: {\n          onend: () => {\n            this.setState({\n              tts_finished: true\n            });\n\n            if (donation.media_url) {\n              setTimeout(() => {\n                this.setState({\n                  playing: false\n                });\n              }, 30000);\n            } else {\n              this.setState({\n                playing: false\n              });\n            }\n          }\n        }\n      }), 5800);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.state.tts_finished && this.state.donations[0].media_url ? React.createElement(ReactPlayer, {\n      url: this.state.donations[0].media_url,\n      width: \"0\",\n      height: \"0\",\n      config: {\n        youtube: {\n          playerVars: {\n            start: this.state.donations[0].start_time,\n            end: this.state.donations[0].start_time + 30\n          }\n        }\n      },\n      playing: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), this.state.loaded && this.state.donations[0] ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"audio\", {\n      className: \"donation-alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: Donation_Alert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"donation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"alert-color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.donations[0].username ? this.state.donations[0].username : 'Anonymous'), \" donated \", React.createElement(\"span\", {\n      className: \"alert-color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"$\", this.state.donations[0].amount), \"!\"), React.createElement(\"div\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.donations[0].message ? this.state.donations[0].message : '')), React.createElement(\"div\", {\n      id: \"player\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Lennart/Desktop/dono-system/src/components/alertbox.component.js"],"names":["React","Component","axios","Speech","ReactPlayer","Donation_Alert","Alertbox","constructor","props","state","loaded","tts_finished","playing","componentDidMount","setInterval","get","then","response","setState","donations","data","catch","error","console","log","componentDidUpdate","prevProps","prevState","snapshot","donation","id","_id","username","message","amount","media_url","start_time","played","post","res","donation_alert_file","document","getElementsByClassName","play","speech","setLanguage","setPitch","setRate","setTimeout","speak","text","listeners","onend","render","youtube","playerVars","start","end"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../alertbox.css';\r\nimport Speech from 'speak-tts';\r\nimport ReactPlayer from 'react-player';\r\nimport Donation_Alert from '../donation-alert.mp3'\r\n\r\nexport default class Alertbox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loaded: false,\r\n            tts_finished: false,\r\n            playing: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            if(!this.state.playing){\r\n                axios.get('http://localhost:5000/donations/queue')\r\n                .then(response => {\r\n                this.setState({ donations: response.data, loaded: true, tts_finished: false })\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n            }\r\n        }, 10000);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevState.donations != this.state.donations){\r\n\r\n            const donation = {\r\n                id: this.state.donations[0]._id,\r\n                username: this.state.donations[0].username,\r\n                message: this.state.donations[0].message,\r\n                amount: this.state.donations[0].amount,\r\n                media_url: this.state.donations[0].media_url,\r\n                start_time: this.state.donations[0].start_time,\r\n                played: true\r\n            }\r\n\r\n            this.setState({playing: true});\r\n\r\n            axios.post('http://localhost:5000/donations/update/' + donation.id, donation)\r\n            .then(res => console.log(res.data));\r\n    \r\n            const donation_alert_file = document.getElementsByClassName(\"donation-alert\")[0];\r\n            donation_alert_file.play();\r\n    \r\n            const speech = new Speech();\r\n    \r\n            speech.setLanguage('en-GB');\r\n            speech.setPitch(1);\r\n            speech.setRate(0.8);\r\n    \r\n            \r\n            setTimeout(() => speech.speak({\r\n                 text: `${donation.username} donated $${donation.amount} ${donation.message}`,\r\n                 listeners: {\r\n                     onend: () => {\r\n                         this.setState({ tts_finished: true });\r\n                         if(donation.media_url){\r\n                            setTimeout(() => {\r\n                                this.setState({playing: false});\r\n                            }, 30000);\r\n                         } else {\r\n                             this.setState({playing: false});\r\n                         }\r\n                     }\r\n                 }\r\n            }), 5800);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.tts_finished && this.state.donations[0].media_url ? \r\n                <ReactPlayer\r\n                    url={this.state.donations[0].media_url} \r\n                    width='0'\r\n                    height='0' \r\n                    config={{\r\n                        youtube: {\r\n                        playerVars: { start: this.state.donations[0].start_time, end: this.state.donations[0].start_time + 30 }\r\n                        }\r\n                    }}\r\n                    playing\r\n                />\r\n                : <div></div>\r\n                }\r\n\r\n                {this.state.loaded && this.state.donations[0] ? \r\n                <div>\r\n                    <audio className=\"donation-alert\">\r\n                        <source src={Donation_Alert}></source>\r\n                    </audio>\r\n                    <div id=\"alert\">\r\n                    <div className=\"donation\"><span className=\"alert-color\">{ this.state.donations[0].username ? this.state.donations[0].username : 'Anonymous'}</span> donated <span className=\"alert-color\">${this.state.donations[0].amount}</span>!</div>\r\n                    <div className=\"message\">{this.state.donations[0].message ? this.state.donations[0].message : '' }</div>\r\n                    </div>\r\n                    <div id=\"player\"></div>\r\n                </div>\r\n                : <div></div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}
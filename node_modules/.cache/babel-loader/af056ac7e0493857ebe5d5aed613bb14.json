{"ast":null,"code":"const SayPlatformBase = require('./base.js');\n\nconst BASE_SPEED = 175;\nconst COMMAND = 'say';\n\nclass SayPlatformDarwin extends SayPlatformBase {\n  constructor() {\n    super();\n    this.baseSpeed = BASE_SPEED;\n  }\n\n  buildSpeakCommand({\n    text,\n    voice,\n    speed\n  }) {\n    let args = [];\n    let pipedData = '';\n    let options = {};\n\n    if (!voice) {\n      args.push(text);\n    } else {\n      args.push('-v', voice, text);\n    }\n\n    if (speed) {\n      args.push('-r', this.convertSpeed(speed));\n    }\n\n    return {\n      command: COMMAND,\n      args,\n      pipedData,\n      options\n    };\n  }\n\n  buildExportCommand({\n    text,\n    voice,\n    speed,\n    filename\n  }) {\n    let args = [];\n    let pipedData = '';\n    let options = {};\n\n    if (!voice) {\n      args.push(text);\n    } else {\n      args.push('-v', voice, text);\n    }\n\n    if (speed) {\n      args.push('-r', this.convertSpeed(speed));\n    }\n\n    if (filename) {\n      args.push('-o', filename, '--data-format=LEF32@32000');\n    }\n\n    return {\n      command: COMMAND,\n      args,\n      pipedData,\n      options\n    };\n  }\n\n  runStopCommand() {\n    this.child.stdin.pause();\n    this.child.kill();\n  }\n\n  getVoices() {\n    throw new Error(`say.export(): does not support platform ${this.platform}`);\n  }\n\n}\n\nmodule.exports = SayPlatformDarwin;","map":{"version":3,"sources":["C:/Users/Lennart/Desktop/dono-system/node_modules/say/platform/darwin.js"],"names":["SayPlatformBase","require","BASE_SPEED","COMMAND","SayPlatformDarwin","constructor","baseSpeed","buildSpeakCommand","text","voice","speed","args","pipedData","options","push","convertSpeed","command","buildExportCommand","filename","runStopCommand","child","stdin","pause","kill","getVoices","Error","platform","module","exports"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,WAAD,CAA/B;;AAEA,MAAMC,UAAU,GAAG,GAAnB;AACA,MAAMC,OAAO,GAAG,KAAhB;;AAEA,MAAMC,iBAAN,SAAgCJ,eAAhC,CAAgD;AAC9CK,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,SAAL,GAAiBJ,UAAjB;AACD;;AAEDK,EAAAA,iBAAiB,CAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAF,EAA0B;AACzC,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,QAAI,CAACJ,KAAL,EAAY;AACVE,MAAAA,IAAI,CAACG,IAAL,CAAUN,IAAV;AACD,KAFD,MAEO;AACLG,MAAAA,IAAI,CAACG,IAAL,CAAU,IAAV,EAAgBL,KAAhB,EAAuBD,IAAvB;AACD;;AAED,QAAIE,KAAJ,EAAW;AACTC,MAAAA,IAAI,CAACG,IAAL,CAAU,IAAV,EAAgB,KAAKC,YAAL,CAAkBL,KAAlB,CAAhB;AACD;;AAED,WAAO;AAAEM,MAAAA,OAAO,EAAEb,OAAX;AAAoBQ,MAAAA,IAApB;AAA0BC,MAAAA,SAA1B;AAAqCC,MAAAA;AAArC,KAAP;AACD;;AAEDI,EAAAA,kBAAkB,CAAE;AAAET,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,KAAf;AAAsBQ,IAAAA;AAAtB,GAAF,EAAoC;AACpD,QAAIP,IAAI,GAAG,EAAX;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,QAAI,CAACJ,KAAL,EAAY;AACVE,MAAAA,IAAI,CAACG,IAAL,CAAUN,IAAV;AACD,KAFD,MAEO;AACLG,MAAAA,IAAI,CAACG,IAAL,CAAU,IAAV,EAAgBL,KAAhB,EAAuBD,IAAvB;AACD;;AAED,QAAIE,KAAJ,EAAW;AACTC,MAAAA,IAAI,CAACG,IAAL,CAAU,IAAV,EAAgB,KAAKC,YAAL,CAAkBL,KAAlB,CAAhB;AACD;;AAED,QAAIQ,QAAJ,EAAc;AACZP,MAAAA,IAAI,CAACG,IAAL,CAAU,IAAV,EAAgBI,QAAhB,EAA0B,2BAA1B;AACD;;AAED,WAAO;AAAEF,MAAAA,OAAO,EAAEb,OAAX;AAAoBQ,MAAAA,IAApB;AAA0BC,MAAAA,SAA1B;AAAqCC,MAAAA;AAArC,KAAP;AACD;;AAEDM,EAAAA,cAAc,GAAI;AAChB,SAAKC,KAAL,CAAWC,KAAX,CAAiBC,KAAjB;AACA,SAAKF,KAAL,CAAWG,IAAX;AACD;;AAEDC,EAAAA,SAAS,GAAI;AACX,UAAM,IAAIC,KAAJ,CAAW,2CAA0C,KAAKC,QAAS,EAAnE,CAAN;AACD;;AArD6C;;AAwDhDC,MAAM,CAACC,OAAP,GAAiBxB,iBAAjB","sourcesContent":["const SayPlatformBase = require('./base.js')\n\nconst BASE_SPEED = 175\nconst COMMAND = 'say'\n\nclass SayPlatformDarwin extends SayPlatformBase {\n  constructor () {\n    super()\n    this.baseSpeed = BASE_SPEED\n  }\n\n  buildSpeakCommand ({ text, voice, speed }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    if (!voice) {\n      args.push(text)\n    } else {\n      args.push('-v', voice, text)\n    }\n\n    if (speed) {\n      args.push('-r', this.convertSpeed(speed))\n    }\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  buildExportCommand ({ text, voice, speed, filename }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    if (!voice) {\n      args.push(text)\n    } else {\n      args.push('-v', voice, text)\n    }\n\n    if (speed) {\n      args.push('-r', this.convertSpeed(speed))\n    }\n\n    if (filename) {\n      args.push('-o', filename, '--data-format=LEF32@32000')\n    }\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  runStopCommand () {\n    this.child.stdin.pause()\n    this.child.kill()\n  }\n\n  getVoices () {\n    throw new Error(`say.export(): does not support platform ${this.platform}`)\n  }\n}\n\nmodule.exports = SayPlatformDarwin\n"]},"metadata":{},"sourceType":"script"}
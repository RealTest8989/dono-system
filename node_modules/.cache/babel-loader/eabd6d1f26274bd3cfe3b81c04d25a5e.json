{"ast":null,"code":"const SayLinux = require('./platform/linux.js');\n\nconst SayMacos = require('./platform/darwin.js');\n\nconst SayWin32 = require('./platform/win32.js');\n\nconst MACOS = 'darwin';\nconst LINUX = 'linux';\nconst WIN32 = 'win32';\n\nclass Say {\n  constructor(platform) {\n    if (!platform) {\n      platform = process.platform;\n    }\n\n    if (platform === MACOS) {\n      return new SayMacos();\n    } else if (platform === LINUX) {\n      return new SayLinux();\n    } else if (platform === WIN32) {\n      return new SayWin32();\n    }\n\n    throw new Error(`new Say(): unsupported platorm! ${platform}`);\n  }\n\n}\n\nmodule.exports = new Say(); // Create a singleton automatically for backwards compatability\n\nmodule.exports.Say = Say; // Allow users to `say = new Say.Say(platform)`\n\nmodule.exports.platforms = {\n  WIN32: WIN32,\n  MACOS: MACOS,\n  LINUX: LINUX\n};","map":{"version":3,"sources":["C:/Users/Lennart/Desktop/dono-system/node_modules/say/index.js"],"names":["SayLinux","require","SayMacos","SayWin32","MACOS","LINUX","WIN32","Say","constructor","platform","process","Error","module","exports","platforms"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,qBAAD,CAAxB;;AAEA,MAAMG,KAAK,GAAG,QAAd;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,KAAK,GAAG,OAAd;;AAEA,MAAMC,GAAN,CAAU;AACRC,EAAAA,WAAW,CAAEC,QAAF,EAAY;AACrB,QAAI,CAACA,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGC,OAAO,CAACD,QAAnB;AACD;;AAED,QAAIA,QAAQ,KAAKL,KAAjB,EAAwB;AACtB,aAAO,IAAIF,QAAJ,EAAP;AACD,KAFD,MAEO,IAAIO,QAAQ,KAAKJ,KAAjB,EAAwB;AAC7B,aAAO,IAAIL,QAAJ,EAAP;AACD,KAFM,MAEA,IAAIS,QAAQ,KAAKH,KAAjB,EAAwB;AAC7B,aAAO,IAAIH,QAAJ,EAAP;AACD;;AAED,UAAM,IAAIQ,KAAJ,CAAW,mCAAkCF,QAAS,EAAtD,CAAN;AACD;;AAfO;;AAkBVG,MAAM,CAACC,OAAP,GAAiB,IAAIN,GAAJ,EAAjB,C,CAA2B;;AAC3BK,MAAM,CAACC,OAAP,CAAeN,GAAf,GAAqBA,GAArB,C,CAAyB;;AACzBK,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2B;AACzBR,EAAAA,KAAK,EAAEA,KADkB;AAEzBF,EAAAA,KAAK,EAAEA,KAFkB;AAGzBC,EAAAA,KAAK,EAAEA;AAHkB,CAA3B","sourcesContent":["const SayLinux = require('./platform/linux.js')\nconst SayMacos = require('./platform/darwin.js')\nconst SayWin32 = require('./platform/win32.js')\n\nconst MACOS = 'darwin'\nconst LINUX = 'linux'\nconst WIN32 = 'win32'\n\nclass Say {\n  constructor (platform) {\n    if (!platform) {\n      platform = process.platform\n    }\n\n    if (platform === MACOS) {\n      return new SayMacos()\n    } else if (platform === LINUX) {\n      return new SayLinux()\n    } else if (platform === WIN32) {\n      return new SayWin32()\n    }\n\n    throw new Error(`new Say(): unsupported platorm! ${platform}`)\n  }\n}\n\nmodule.exports = new Say() // Create a singleton automatically for backwards compatability\nmodule.exports.Say = Say // Allow users to `say = new Say.Say(platform)`\nmodule.exports.platforms = {\n  WIN32: WIN32,\n  MACOS: MACOS,\n  LINUX: LINUX\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nconst TextToSpeech = NativeModules.TextToSpeech;\n\nclass Tts extends NativeEventEmitter {\n  constructor() {\n    super(TextToSpeech);\n  }\n\n  getInitStatus() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n\n    return TextToSpeech.getInitStatus();\n  }\n\n  requestInstallEngine() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n\n    return TextToSpeech.requestInstallEngine();\n  }\n\n  requestInstallData() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n\n    return TextToSpeech.requestInstallData();\n  }\n\n  setDucking(enabled) {\n    return TextToSpeech.setDucking(enabled);\n  }\n\n  setDefaultEngine(engineName) {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n\n    return TextToSpeech.setDefaultEngine(engineName);\n  }\n\n  setDefaultVoice(voiceId) {\n    return TextToSpeech.setDefaultVoice(voiceId);\n  }\n\n  setDefaultRate(rate, skipTransform) {\n    return TextToSpeech.setDefaultRate(rate, !!skipTransform);\n  }\n\n  setDefaultPitch(pitch) {\n    return TextToSpeech.setDefaultPitch(pitch);\n  }\n\n  setDefaultLanguage(language) {\n    return TextToSpeech.setDefaultLanguage(language);\n  }\n\n  setIgnoreSilentSwitch(ignoreSilentSwitch) {\n    if (Platform.OS === 'ios' && ignoreSilentSwitch) {\n      return TextToSpeech.setIgnoreSilentSwitch(ignoreSilentSwitch);\n    }\n  }\n\n  voices() {\n    return TextToSpeech.voices();\n  }\n\n  engines() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n\n    return TextToSpeech.engines();\n  }\n\n  speak(utterance, options = {}) {\n    // compatibility with old-style voiceId argument passing\n    if (typeof options === 'string') {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.speak(utterance, options);\n      } else {\n        return TextToSpeech.speak(utterance, {});\n      }\n    } else {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.speak(utterance, options.iosVoiceId);\n      } else {\n        return TextToSpeech.speak(utterance, options.androidParams || {});\n      }\n    }\n  }\n\n  stop(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.stop(onWordBoundary);\n    } else {\n      return TextToSpeech.stop();\n    }\n  }\n\n  pause(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.pause(onWordBoundary);\n    }\n\n    return null;\n  }\n\n  resume() {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.resume();\n    }\n\n    return null;\n  }\n\n  addEventListener(type, handler) {\n    this.addListener(type, handler);\n  }\n\n  removeEventListener(type, handler) {\n    this.removeListener(type, handler);\n  }\n\n}\n\nexport default new Tts();","map":{"version":3,"sources":["C:/Users/Lennart/Desktop/dono-system/node_modules/react-native-tts/index.js"],"names":["NativeModules","NativeEventEmitter","Platform","TextToSpeech","Tts","constructor","getInitStatus","OS","Promise","resolve","requestInstallEngine","requestInstallData","setDucking","enabled","setDefaultEngine","engineName","setDefaultVoice","voiceId","setDefaultRate","rate","skipTransform","setDefaultPitch","pitch","setDefaultLanguage","language","setIgnoreSilentSwitch","ignoreSilentSwitch","voices","engines","speak","utterance","options","iosVoiceId","androidParams","stop","onWordBoundary","pause","resume","addEventListener","type","handler","addListener","removeEventListener","removeListener"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,EAA4CC,QAA5C,QAA4D,cAA5D;AAEA,MAAMC,YAAY,GAAGH,aAAa,CAACG,YAAnC;;AAEA,MAAMC,GAAN,SAAkBH,kBAAlB,CAAqC;AACnCI,EAAAA,WAAW,GAAG;AACZ,UAAMF,YAAN;AACD;;AAEDG,EAAAA,aAAa,GAAG;AACd,QAAIJ,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAON,YAAY,CAACG,aAAb,EAAP;AACD;;AAEDI,EAAAA,oBAAoB,GAAG;AACrB,QAAIR,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAON,YAAY,CAACO,oBAAb,EAAP;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,QAAIT,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAON,YAAY,CAACQ,kBAAb,EAAP;AACD;;AAEDC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,WAAOV,YAAY,CAACS,UAAb,CAAwBC,OAAxB,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,UAAD,EAAa;AAC3B,QAAIb,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAON,YAAY,CAACW,gBAAb,CAA8BC,UAA9B,CAAP;AACD;;AAEDC,EAAAA,eAAe,CAACC,OAAD,EAAU;AACvB,WAAOd,YAAY,CAACa,eAAb,CAA6BC,OAA7B,CAAP;AACD;;AAEDC,EAAAA,cAAc,CAACC,IAAD,EAAOC,aAAP,EAAsB;AAClC,WAAOjB,YAAY,CAACe,cAAb,CAA4BC,IAA5B,EAAkC,CAAC,CAACC,aAApC,CAAP;AACD;;AAEDC,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACrB,WAAOnB,YAAY,CAACkB,eAAb,CAA6BC,KAA7B,CAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AAC3B,WAAOrB,YAAY,CAACoB,kBAAb,CAAgCC,QAAhC,CAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAACC,kBAAD,EAAqB;AACxC,QAAIxB,QAAQ,CAACK,EAAT,KAAgB,KAAhB,IAAyBmB,kBAA7B,EAAiD;AAC/C,aAAOvB,YAAY,CAACsB,qBAAb,CAAmCC,kBAAnC,CAAP;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAOxB,YAAY,CAACwB,MAAb,EAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,QAAI1B,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAON,YAAY,CAACyB,OAAb,EAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,SAAD,EAAYC,OAAO,GAAG,EAAtB,EAA0B;AAC7B;AACA,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAI7B,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,eAAOJ,YAAY,CAAC0B,KAAb,CAAmBC,SAAnB,EAA8BC,OAA9B,CAAP;AACD,OAFD,MAEO;AACL,eAAO5B,YAAY,CAAC0B,KAAb,CAAmBC,SAAnB,EAA8B,EAA9B,CAAP;AACD;AACF,KAND,MAMO;AACL,UAAI5B,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,eAAOJ,YAAY,CAAC0B,KAAb,CAAmBC,SAAnB,EAA8BC,OAAO,CAACC,UAAtC,CAAP;AACD,OAFD,MAEO;AACL,eAAO7B,YAAY,CAAC0B,KAAb,CAAmBC,SAAnB,EAA8BC,OAAO,CAACE,aAAR,IAAyB,EAAvD,CAAP;AACD;AACF;AACF;;AAEDC,EAAAA,IAAI,CAACC,cAAD,EAAiB;AACnB,QAAIjC,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOJ,YAAY,CAAC+B,IAAb,CAAkBC,cAAlB,CAAP;AACD,KAFD,MAEO;AACL,aAAOhC,YAAY,CAAC+B,IAAb,EAAP;AACD;AACF;;AAEDE,EAAAA,KAAK,CAACD,cAAD,EAAiB;AACpB,QAAIjC,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOJ,YAAY,CAACiC,KAAb,CAAmBD,cAAnB,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,QAAInC,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AACzB,aAAOJ,YAAY,CAACkC,MAAb,EAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC9B,SAAKC,WAAL,CAAiBF,IAAjB,EAAuBC,OAAvB;AACD;;AAEDE,EAAAA,mBAAmB,CAACH,IAAD,EAAOC,OAAP,EAAgB;AACjC,SAAKG,cAAL,CAAoBJ,IAApB,EAA0BC,OAA1B;AACD;;AAnHkC;;AAsHrC,eAAe,IAAIpC,GAAJ,EAAf","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\nconst TextToSpeech = NativeModules.TextToSpeech;\n\nclass Tts extends NativeEventEmitter {\n  constructor() {\n    super(TextToSpeech);\n  }\n\n  getInitStatus() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.getInitStatus();\n  }\n\n  requestInstallEngine() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallEngine();\n  }\n\n  requestInstallData() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.requestInstallData();\n  }\n\n  setDucking(enabled) {\n    return TextToSpeech.setDucking(enabled);\n  }\n\n  setDefaultEngine(engineName) {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.setDefaultEngine(engineName);\n  }\n\n  setDefaultVoice(voiceId) {\n    return TextToSpeech.setDefaultVoice(voiceId);\n  }\n\n  setDefaultRate(rate, skipTransform) {\n    return TextToSpeech.setDefaultRate(rate, !!skipTransform);\n  }\n\n  setDefaultPitch(pitch) {\n    return TextToSpeech.setDefaultPitch(pitch);\n  }\n\n  setDefaultLanguage(language) {\n    return TextToSpeech.setDefaultLanguage(language);\n  }\n\n  setIgnoreSilentSwitch(ignoreSilentSwitch) {\n    if (Platform.OS === 'ios' && ignoreSilentSwitch) {\n      return TextToSpeech.setIgnoreSilentSwitch(ignoreSilentSwitch);\n    }\n  }\n\n  voices() {\n    return TextToSpeech.voices();\n  }\n\n  engines() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve(true);\n    }\n    return TextToSpeech.engines();\n  }\n\n  speak(utterance, options = {}) {\n    // compatibility with old-style voiceId argument passing\n    if (typeof options === 'string') {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.speak(utterance, options);\n      } else {\n        return TextToSpeech.speak(utterance, {});\n      }\n    } else {\n      if (Platform.OS === 'ios') {\n        return TextToSpeech.speak(utterance, options.iosVoiceId);\n      } else {\n        return TextToSpeech.speak(utterance, options.androidParams || {});\n      }\n    }\n  }\n\n  stop(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.stop(onWordBoundary);\n    } else {\n      return TextToSpeech.stop();\n    }\n  }\n\n  pause(onWordBoundary) {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.pause(onWordBoundary);\n    }\n    return null;\n  }\n\n  resume() {\n    if (Platform.OS === 'ios') {\n      return TextToSpeech.resume();\n    }\n    return null;\n  }\n\n  addEventListener(type, handler) {\n    this.addListener(type, handler);\n  }\n\n  removeEventListener(type, handler) {\n    this.removeListener(type, handler);\n  }\n}\n\nexport default new Tts();\n"]},"metadata":{},"sourceType":"module"}